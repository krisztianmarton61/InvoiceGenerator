@using InvoiceGenerator.Shared.Models
@using InvoiceGenerator.Shared.DTOs
@using InvoiceGenerator.Services
@inject IInvoiceService InvoiceService
@inject IClientService ClientService

@if (IsVisible)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Invoice</h5>
                    <button type="button" class="btn-close" @onclick="OnCancel"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@Invoice" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="clientId" class="form-label">Client</label>
                            <InputSelect id="clientId" class="form-select" @bind-Value="Invoice.ClientId">
                                <option value="">Select a client...</option>
                                @if (Clients != null)
                                {
                                    @foreach (var client in Clients)
                                    {
                                        <option value="@client.Id">@client.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Invoice.ClientId)" />
                        </div>

                        <div class="mb-3">
                            <label for="issueDate" class="form-label">Issue Date</label>
                            <InputDate id="issueDate" class="form-control" @bind-Value="Invoice.IssueDate" />
                            <ValidationMessage For="@(() => Invoice.IssueDate)" />
                        </div>

                        <div class="mb-3">
                            <label for="dueDate" class="form-label">Due Date</label>
                            <InputDate id="dueDate" class="form-control" @bind-Value="Invoice.DueDate" />
                            <ValidationMessage For="@(() => Invoice.DueDate)" />
                        </div>

                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes</label>
                            <InputTextArea id="notes" class="form-control" @bind-Value="Invoice.Notes" />
                            <ValidationMessage For="@(() => Invoice.Notes)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                            <button type="submit" class="btn btn-primary">Create Invoice</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<Invoice> OnSave { get; set; }

    private CreateInvoiceDto Invoice { get; set; } = new CreateInvoiceDto
    {
        IssueDate = DateTime.Today,
        DueDate = DateTime.Today.AddDays(30)
    };

    private IEnumerable<ClientDto>? Clients { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Clients = await ClientService.GetAllClientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading clients: {ex}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var createdInvoice = await InvoiceService.CreateInvoiceAsync(Invoice);
            await OnSave.InvokeAsync(createdInvoice);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating invoice: {ex}");
        }
    }
} 