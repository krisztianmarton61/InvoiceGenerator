@using InvoiceGenerator.Shared.DTOs
@using InvoiceGenerator.Shared.Models
@using InvoiceGenerator.Services
@inject IInvoiceService InvoiceService

<div class="modal @(IsVisible ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Invoice Items</h5>
                <button type="button" class="btn-close" @onclick="HandleClose"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <button class="btn btn-primary" @onclick="() => ShowAddItemForm = true">
                        <i class="bi bi-plus-circle"></i> Add New Item
                    </button>
                </div>

                @if (ShowAddItemForm)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h6 class="card-title">Add New Item</h6>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Description</label>
                                    <input type="text" class="form-control" @bind="NewItem.Description" />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" class="form-control" @bind="NewItem.Quantity" min="0" step="0.01" />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Unit Price</label>
                                    <input type="number" class="form-control" @bind="NewItem.UnitPrice" min="0" step="0.01" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Tax Rate (%)</label>
                                    <input type="number" class="form-control" @bind="NewItem.TaxRate" min="0" max="100" step="0.01" />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Subtotal</label>
                                    <input type="text" class="form-control" value="@(NewItem.Quantity * NewItem.UnitPrice)" readonly />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Tax Amount</label>
                                    <input type="text" class="form-control" value="@(NewItem.Quantity * NewItem.UnitPrice * (NewItem.TaxRate / 100))" readonly />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Total</label>
                                    <input type="text" class="form-control" value="@(NewItem.Quantity * NewItem.UnitPrice * (1 + NewItem.TaxRate / 100))" readonly />
                                </div>
                            </div>
                            <div class="text-end">
                                <button class="btn btn-secondary me-2" @onclick="() => ShowAddItemForm = false">Cancel</button>
                                <button class="btn btn-primary" @onclick="SaveNewItem">Save Item</button>
                            </div>
                        </div>
                    </div>
                }

                @if (Items == null || !Items.Any())
                {
                    <div class="alert alert-info">
                        No items found. Click "Add New Item" to add items to this invoice.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Quantity</th>
                                    <th>Unit Price</th>
                                    <th>Tax Rate</th>
                                    <th>Subtotal</th>
                                    <th>Tax</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Items)
                                {
                                    <tr>
                                        <td>@item.Description</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.UnitPrice.ToString("C")</td>
                                        <td>@item.TaxRate%</td>
                                        <td>@item.Subtotal.ToString("C")</td>
                                        <td>@item.Tax.ToString("C")</td>
                                        <td>@((item.Subtotal + item.Tax).ToString("C"))</td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteItem(item)" title="Delete Item">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr class="table-primary">
                                    <td colspan="4" class="text-end"><strong>Totals:</strong></td>
                                    <td><strong>@Items.Sum(i => i.Subtotal).ToString("C")</strong></td>
                                    <td><strong>@Items.Sum(i => i.Tax).ToString("C")</strong></td>
                                    <td><strong>@Items.Sum(i => i.Subtotal + i.Tax).ToString("C")</strong></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HandleClose">Close</button>
            </div>
        </div>
    </div>
</div>

<ConfirmationDialog IsVisible="ShowDeleteConfirmation"
                   Title="Delete Invoice Item"
                   Message="Are you sure you want to delete this item? This action cannot be undone."
                   OnConfirm="ConfirmDeleteItem"
                   OnCancel="@(() => ShowDeleteConfirmation = false)" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<List<InvoiceItemDto>> OnSave { get; set; }
    [Parameter] public int InvoiceId { get; set; }

    private List<InvoiceItemDto> Items { get; set; } = new();
    private bool ShowAddItemForm { get; set; }
    private InvoiceItemDto NewItem { get; set; } = new()
    {
        InvoiceId = 0,
        Quantity = 1,
        UnitPrice = 0,
        TaxRate = 20,
        Description = ""
    };
    private bool ShowDeleteConfirmation { get; set; }
    private InvoiceItemDto? ItemToDelete { get; set; }

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            NewItem.InvoiceId = InvoiceId;
            _ = LoadItemsAsync();
        }
    }

    private async Task LoadItemsAsync()
    {
        Items = await InvoiceService.GetInvoiceItemsAsync(InvoiceId);
        StateHasChanged();
    }

    private async Task SaveNewItem()
    {
        if (string.IsNullOrWhiteSpace(NewItem.Description))
        {
            return;
        }

        await InvoiceService.AddInvoiceItemAsync(NewItem);
        await LoadItemsAsync();
        ShowAddItemForm = false;
        NewItem = new InvoiceItemDto
        {
            InvoiceId = InvoiceId,
            Quantity = 1,
            UnitPrice = 0,
            TaxRate = 20,
            Description = ""
        };
    }

    private void DeleteItem(InvoiceItemDto item)
    {
        ItemToDelete = item;
        ShowDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteItem()
    {
        if (ItemToDelete != null)
        {
            await InvoiceService.DeleteInvoiceItemAsync(InvoiceId, ItemToDelete.Id);
            await LoadItemsAsync();
            ShowDeleteConfirmation = false;
            ItemToDelete = null;
        }
    }

    private async Task HandleClose()
    {
        await OnSave.InvokeAsync(Items);
        await OnCancel.InvokeAsync();
    }
} 